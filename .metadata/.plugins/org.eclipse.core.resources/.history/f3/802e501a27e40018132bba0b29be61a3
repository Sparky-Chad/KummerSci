package matrix;

import javax.swing.*;
import javax.swing.table.AbstractTableModel;
import java.util.*;


public class Matrix extends JTable implements JavaMap{
	
	protected ArrayList<ArrayList<Object>> data = new ArrayList<ArrayList<Object>>();
	protected ArrayList<Object> blank = new ArrayList<Object>();
	int dim[] = new int[2];
	//this contains a dynamic data array for the table, should only be needed for 
	//operations between the arrays
	public Matrix(int rows, int columns) {
		
	}
	class tableModel extends AbstractTableModel {
	
		public void resize(int rows, int columns) {
			//resize the array list to find what size they should be at
			while(data.size() != rows) {
				//run when the number of rows are not the same
				if(data.size() > rows) {	//if it is too big
					data.remove(data.size() - 1);
					//removes the last row of the dynamic array
				} else if(data.size() < rows) {
					data.add(blank);
					//adding more rows of data
				}
			}
			//end of column manipulation
			for(int i = 0; i < data.size(); i++) {
				//go through each column
				while(data.get(i).size() != columns) {
					//current columns data is not equal
					if(data.get(i).size() > columns) {
						//data too big
						data.get(i).remove(data.get(i).size() - 1);
							//remove last bit of data
					} else if(data.get(i).size() < columns) {
						//data is too small
						data.get(i).add(0);
						//adds a zero for simplicities sake
					}
				}
			}
		}
		//finish resizing

		public int getRowCount() {
			// TODO Auto-generated method stub
			data.size();
		}

		public int getColumnCount() {
			// TODO Auto-generated method stub
			return 0;
		}

		public Object getValueAt(int rowIndex, int columnIndex) {
			// TODO Auto-generated method stub
			return null;
		}
		
	}
	
}
